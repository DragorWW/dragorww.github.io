---
import SkillTag from "./SkillTag.astro";
---

<div class="terminal">
  <div class="terminal__header">
    <div class="terminal__dots">
      <span class="terminal__dots-item terminal__dots-item--red"></span>
      <span class="terminal__dots-item terminal__dots-item--yellow"></span>
      <span class="terminal__dots-item terminal__dots-item--green"></span>
    </div>
    <div class="terminal__title">dragorww.me ‚Äî -zsh</div>
  </div>
  <div class="terminal__content">
    <div class="terminal__history">
      <section id="home" class="terminal-section">
        <article
          class="terminal__command"
          data-command="welcome"
          data-directory="~/digital-garden"
          data-branch="main"
        >
          <template>
            <div class="terminal__output">
              <div class="terminal__welcome">
                –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π —Å–∞–¥! üå±
                <br /><br />
                –ó–¥–µ—Å—å —Ä–∞—Å—Ç—É—Ç –∏–¥–µ–∏, –ø—Ä–æ–µ–∫—Ç—ã –∏ –∑–Ω–∞–Ω–∏—è...
                <br />
                –ò—Å—Å–ª–µ–¥—É–π—Ç–µ —Å –ø–æ–º–æ—â—å—é <span class="terminal__cmd-hint">help</span
                >
              </div>
            </div>
          </template>
        </article>

        <article class="terminal__command" data-command="help">
          <template>
            <div class="terminal__output">
              –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
              <br />
              help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ<br />
              about - –û–±–æ –º–Ω–µ<br />
              skills - –ú–æ–∏ –Ω–∞–≤—ã–∫–∏<br />
              contact - –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è<br />
              projects - –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤<br />
              clear - –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª
            </div>
          </template>
        </article>

        <article class="terminal__command" data-command="about">
          <template>
            <div class="terminal__output">
              <dl class="terminal__info">
                <dt class="terminal__info-term">Name:</dt>
                <dd class="terminal__info-desc">–°–µ—Ä–≥–µ–π –ê–Ω–¥—Ä–µ–µ–≤</dd>
                <dt class="terminal__info-term">Role:</dt>
                <dd class="terminal__info-desc">Head of Engineering</dd>
                <dt class="terminal__info-term">Status:</dt>
                <dd class="terminal__info-desc">
                  Developing awesome things...
                </dd>
              </dl>
            </div>
          </template>
        </article>

        <article class="terminal__command" data-command="skills">
          <template>
            <div class="terminal__output">
              <ul class="skill-tags">
                <SkillTag name="React.js" version="18" />
                <SkillTag name="Node.js" version="18" />
                <SkillTag name="TypeScript" version="5" />
                <SkillTag name="Python" version="3.11" />
              </ul>
            </div>
          </template>
        </article>

        <article class="terminal__command" data-command="contact">
          <template>
            <div class="terminal__output">
              <dl class="terminal__info">
                <dt class="terminal__info-term">Email:</dt>
                <dd class="terminal__info-desc">dragorww@gmail.com</dd>
                <dt class="terminal__info-term">Telegram:</dt>
                <dd class="terminal__info-desc">@dragorww</dd>
                <dt class="terminal__info-term">GitHub:</dt>
                <dd class="terminal__info-desc">github.com/dragorww</dd>
              </dl>
            </div>
          </template>
        </article>

        <article class="terminal__command" data-command="projects">
          <template>
            <div class="terminal__project">
              <time class="terminal__project-date">[2024]</time>
              <h3 class="terminal__project-title">
                ‚Üí Develop Business Analytics Platform
              </h3>
              <!-- <ul class="terminal__project-details">
                                        <li>‚Ä¢ 7 companies integration</li>
                                        <li>‚Ä¢ 100k+ users</li>
                                        <li>‚Ä¢ 99.9% uptime</li>
                                </ul> -->
            </div>
            <div class="terminal__project">
              <time class="terminal__project-date">[2023]</time>
              <h3 class="terminal__project-title">
                ‚Üí Develop Educational Platform
              </h3>
              <!-- <ul class="terminal__project-details">
                                        <li>‚Ä¢ 7 companies integration</li>
                                        <li>‚Ä¢ 100k+ users</li>
                                        <li>‚Ä¢ 99.9% uptime</li>
                                    </ul> -->
            </div>
            <div class="terminal__project">
              <time class="terminal__project-date">[2019]</time>
              <h3 class="terminal__project-title">
                ‚Üí Develop DevOps CD/CD Tools (clone Jenkins)
              </h3>
              <!-- <ul class="terminal__project-details">
                                        <li>‚Ä¢ 7 companies integration</li>
                                        <li>‚Ä¢ 100k+ users</li>
                                        <li>‚Ä¢ 99.9% uptime</li>
                                    </ul> -->
            </div>
            <div class="terminal__project">
              <time class="terminal__project-date">[2016]</time>
              <h3 class="terminal__project-title">
                ‚Üí Develop Cargo Marketplace
              </h3>
              <!-- <ul class="terminal__project-details">
                                        <li>‚Ä¢ 7 companies integration</li>
                                        <li>‚Ä¢ 100k+ users</li>
                                        <li>‚Ä¢ 99.9% uptime</li>
                                    </ul> -->
            </div>
          </template>
        </article>

        <!-- –î–æ–±–∞–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ -->
        <template id="loading-template">
          <div class="terminal__output terminal__output--loading">–î—É–º–∞—é</div>
        </template>
      </section>
    </div>
  </div>
</div>

<script>
  declare global {
    function gtag(...args: any[]): void;
  }

  class TerminalScrollManager {
    terminal: any;
    autoScrollEnabled: boolean;
    savedScrollTop: number;
    resizeObserver: ResizeObserver;
    constructor(terminalContent) {
      this.terminal = terminalContent;
      this.autoScrollEnabled = true;
      this.savedScrollTop = 0;

      this.resizeObserver = new ResizeObserver(() => {
        this.scrollToBottom();
      });

      this.observeLastPrompt();
    }

    observeLastPrompt() {
      const lastPrompt = this.terminal.querySelector(
        ".terminal__prompt:last-child",
      );
      if (lastPrompt) {
        this.resizeObserver.disconnect();
        this.resizeObserver.observe(lastPrompt);
      }
    }

    disableScroll() {
      this.terminal.style.overflowY = "hidden";
      this.savedScrollTop = this.terminal.scrollTop;
      this.terminal.addEventListener("scroll", this.preventScroll);
    }

    enableScroll() {
      this.terminal.style.overflowY = "auto";
      this.terminal.removeEventListener("scroll", this.preventScroll);
    }

    preventScroll = () => {
      if (this.autoScrollEnabled) {
        this.terminal.scrollTop = this.savedScrollTop;
      }
    };

    disableAutoScroll() {
      this.autoScrollEnabled = false;
      this.savedScrollTop = this.terminal.scrollTop;
    }

    enableAutoScroll() {
      this.autoScrollEnabled = true;
    }

    scrollToBottom() {
      if (this.autoScrollEnabled) {
        this.savedScrollTop =
          this.terminal.scrollHeight - this.terminal.clientHeight;
        this.terminal.scrollTop = this.savedScrollTop;
      }
    }

    smoothScrollToBottom() {
      if (this.autoScrollEnabled) {
        this.terminal.scrollTo({
          top: this.terminal.scrollHeight,
          behavior: "smooth",
        });
      }
    }

    restoreScroll() {
      this.terminal.scrollTop = this.savedScrollTop;
    }
  }

  class TerminalAnimation {
    commandDelay = 50;
    commandPause = 1000;

    currentDirectory = "";
    currentBranch = "";
    currentInput = "";
    commandHistory = [];
    historyIndex = -1;

    hints = [
      "–≥–¥–µ —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å?",
      "–∫–∞–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –¥–µ–ª–∞–ª?",
      "—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã",
      "–∫–∞–∫ —Å —Ç–æ–±–æ–π —Å–≤—è–∑–∞—Ç—å—Å—è?",
      "–∫–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å?",
      "–≥–¥–µ —Ç–µ–±—è –Ω–∞–π—Ç–∏ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö?",
      "help - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥",
    ];

    hintDelay = 1500;
    typeDelay = 60;
    eraseDelay = 30;
    pauseDelay = 1000;
    betweenHintsDelay = 300;
    hintIndex = 0;
    hintTimeout = null;
    isShowingHint = false;
    isInitializing = true;
    isAnimating = true;

    hasAISupport =
      "userAgentData" in navigator && "speechRecognition" in window;
    HF_API_TOKEN = "hf_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";
    MODEL_URL =
      "https://api-inference.huggingface.co/models/facebook/blenderbot-400M-distill";
    container: any;
    terminalContent: any;
    scrollManager: TerminalScrollManager;
    commands: {};

    constructor() {
      this.container = document.querySelector(".terminal__history");
      this.terminalContent = document.querySelector(".terminal__content");
      this.scrollManager = new TerminalScrollManager(this.terminalContent);

      this.initialize();
      this.startHintCycle();
    }

    async initialize() {
      this.loadCommands();
      this.scrollManager.disableScroll();
      await this.simulateCommand("welcome");

      const initialCommands = ["about", "skills", "projects"];
      for (const cmd of initialCommands) {
        await this.sleep(this.commandPause);
        await this.simulateCommand(cmd);
      }

      await this.sleep(this.commandPause);
      this.isAnimating = false;
      this.isInitializing = false;
      this.scrollManager.enableScroll();
      this.setupEventListeners();

      this.handlePrompt({
        showCursor: document.activeElement === this.terminalContent,
        action: "append",
      });

      setTimeout(() => {
        if (!this.currentInput) {
          this.startHintCycle();
        }
      }, 1000);
    }

    loadCommands() {
      const commands = {};
      document
        .querySelectorAll(".terminal__command")
        .forEach((cmd: HTMLElement) => {
          const commandName = cmd.dataset.command;
          commands[commandName] = {
            description: cmd.dataset.description || "",
            directory: cmd.dataset.directory || "",
            branch: cmd.dataset.branch || "",
            command: cmd.dataset.command || commandName,
            execute: () => {
              const template = cmd.querySelector("template");
              return template.innerHTML.trim();
            },
          };
        });

      this.commands = commands;
    }

    handlePrompt({
      command = "",
      showCursor = false,
      action = "create",
      isHint = false,
    } = {}) {
      const shouldShowCursor =
        showCursor &&
        (document.activeElement === this.terminalContent ||
          this.isInitializing);

      const promptHTML = `
            <span class="terminal__prompt">
                ${this.currentDirectory ? `<span class="terminal__prompt-path">${this.currentDirectory}</span>` : ""}
                ${this.currentBranch ? `<span class="terminal__prompt-branch">(${this.currentBranch})</span>` : ""}
                <span class="terminal__prompt-symbol">$</span> 
                <span class="terminal__prompt-input ${isHint ? "hint" : ""}">${command}${shouldShowCursor ? '<span class="terminal__prompt-cursor">‚ñà</span>' : ""}</span>
            </span>`;

      switch (action) {
        case "create":
          const promptElement = document.createElement("p");
          promptElement.innerHTML = promptHTML;
          return promptElement;

        case "update":
          const lastPrompt = this.container.lastElementChild;
          lastPrompt.innerHTML = promptHTML;

          if (!isHint) {
            this.container.appendChild(lastPrompt);
            this.scrollManager.observeLastPrompt();
            this.scrollManager.scrollToBottom();
          }

          return lastPrompt;

        case "append":
          const newPrompt = document.createElement("p");
          newPrompt.innerHTML = promptHTML;
          if (!isHint) {
            this.container.appendChild(newPrompt);
            this.scrollManager.observeLastPrompt();
            this.scrollManager.scrollToBottom();
          }
          return newPrompt;
      }
    }

    sendAnalytics(eventName, params) {
      if (typeof gtag === "function") {
        gtag("event", eventName, {
          event_category: "Terminal",
          ...params,
        });
      } else {
        console.debug("Google Analytics not available");
      }
    }

    async runCommand(command) {
      if (command.command === "clear") {
        this.container.innerHTML = "";
        return;
      }

      const output = command.execute();
      const tempContainer = document.createElement("div");
      tempContainer.innerHTML = output;

      const outputs = Array.from(tempContainer.children);

      for (let i = 0; i < outputs.length; i++) {
        const outputContent = outputs[i];
        const outputElement = document.createElement("div");
        outputElement.classList.add("terminal__output");
        outputElement.appendChild(outputContent);
        this.container.appendChild(outputElement);
        this.scrollManager.scrollToBottom();

        if (i < outputs.length - 1) {
          await this.sleep(500);
        }
      }

      if (command.directory) {
        this.currentDirectory = command.directory;
      }

      if (command.branch) {
        this.currentBranch = command.branch;
      }
    }

    async simulateCommand(commandName) {
      const command = this.commands[commandName];
      const text = command.command || commandName;

      let promptElement = this.handlePrompt({ action: "append" });

      let currentText = "";
      for (const char of text) {
        await this.sleep(this.commandDelay);
        currentText += char;
        promptElement.innerHTML = this.handlePrompt({
          command: currentText,
          action: "create",
        }).innerHTML;
        this.scrollManager.scrollToBottom();
      }

      await this.sleep(500);
      await this.runCommand(command);
    }

    async executeCommand() {
      const command = this.currentInput.trim().toLowerCase();

      if (command) {
        this.sendAnalytics("terminal_command", {
          event_label: command,
          value: 1,
        });

        this.isAnimating = true;
        this.commandHistory.unshift(command);
        this.historyIndex = -1;

        const promptElement = this.container.lastElementChild;
        promptElement.innerHTML = this.handlePrompt({
          command: this.currentInput,
          action: "update",
        }).innerHTML;

        if (this.commands[command]) {
          await this.runCommand(this.commands[command]);
        } else {
          const output = await this.tryAIResponse(command);
          if (output) {
            const tempContainer = document.createElement("div");
            tempContainer.innerHTML = output;
            this.container.appendChild(tempContainer.firstElementChild);
            this.scrollManager.scrollToBottom();
          }
        }

        this.isAnimating = false;
      }

      this.currentInput = "";
      this.handlePrompt({ showCursor: true, action: "append" });
      this.startHintCycle();
    }

    async tryAIResponse(command) {
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        const loadingTemplate = document.getElementById(
          "loading-template",
        ) as HTMLTemplateElement;
        const loadingElement = loadingTemplate.content.cloneNode(
          true,
        ) as HTMLElement;
        const firstChild = loadingElement.firstElementChild as HTMLElement;
        this.container.appendChild(firstChild);
        this.scrollManager.scrollToBottom();

        await this.sleep(2000);

        const response = await fetch(this.MODEL_URL, {
          method: "POST",
          headers: {
            Authorization: `Bearer ${this.HF_API_TOKEN}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            inputs: {
              text: `Context: You are a helpful assistant for Sergey Andreev's personal website. 
                               He is a CTO with experience in educational projects.
                               Current question: ${command}`,
              max_length: 100,
            },
          }),
        });

        loadingElement.remove();

        if (!response.ok) {
          throw new Error("API Error");
        }

        const data = await response.json();
        const aiResponse = data.generated_text || data[0].generated_text;

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è
        this.sendAnalytics("ai_response", {
          event_label: command,
          value: 1,
          response_type: "huggingface",
          response_text: truncateText(aiResponse),
        });

        return `<div class="terminal__output terminal__output--ai">
                <div class="terminal__output-header">ü§ñ AI Response:</div>
                <div class="terminal__output-content">${aiResponse}</div>
            </div>`;
      } catch (error) {
        console.error("AI Error:", error);

        const localAI = new LocalAI();
        const fallbackResponse = localAI.generateResponse(command);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è
        this.sendAnalytics("ai_response", {
          event_label: command,
          value: 1,
          response_type: "local",
          response_text: truncateText(fallbackResponse),
        });

        return `<div class="terminal__output terminal__output--ai">
                <div class="terminal__output-header">ü§ñ Local AI:</div>
                <div class="terminal__output-content">${fallbackResponse}</div>
            </div>`;
      }
    }

    sleep(ms) {
      return new Promise((resolve) => setTimeout(resolve, ms));
    }

    setupEventListeners() {
      this.terminalContent.addEventListener("click", () => {
        this.terminalContent.focus();
      });

      this.terminalContent.setAttribute("tabindex", "0");

      this.terminalContent.addEventListener("keydown", (e) => {
        if (e.code === "Space") {
          e.preventDefault();
        }
        this.handleKeyPress(e);
      });

      this.terminalContent.addEventListener("focus", () => {
        if (this.isShowingHint) {
          this.isShowingHint = false;
          clearTimeout(this.hintTimeout);
          this.handlePrompt({
            command: "",
            showCursor: true,
            action: "update",
          });
        }
      });

      this.terminalContent.addEventListener("blur", () => {
        if (!this.currentInput && !this.isAnimating) {
          this.startHintCycle();
        }
      });

      document.removeEventListener("keydown", this.handleKeyPress);
    }

    handleKeyPress(e) {
      if (this.isShowingHint) {
        this.isShowingHint = false;
        clearTimeout(this.hintTimeout);
        this.currentInput = "";
        this.handlePrompt({ command: "", showCursor: true, action: "update" });
      }

      if (e.key === "Enter") {
        this.executeCommand();
        this.startHintCycle();
      } else if (e.key === "Backspace") {
        this.currentInput = this.currentInput.slice(0, -1);
        this.handlePrompt({
          command: this.currentInput,
          showCursor: true,
          action: "update",
        });
      } else if (e.key === "ArrowUp") {
        this.navigateHistory(-1);
      } else if (e.key === "ArrowDown") {
        this.navigateHistory(1);
      } else if (e.key.length === 1) {
        this.currentInput += e.key;
        this.handlePrompt({
          command: this.currentInput,
          showCursor: true,
          action: "update",
        });
      }
    }

    navigateHistory(direction) {
      if (this.commandHistory.length === 0) return;

      this.historyIndex = Math.max(
        -1,
        Math.min(this.commandHistory.length - 1, this.historyIndex + direction),
      );

      if (this.historyIndex === -1) {
        this.currentInput = "";
      } else {
        this.currentInput = this.commandHistory[this.historyIndex];
      }

      this.handlePrompt({
        command: this.currentInput,
        showCursor: true,
        action: "update",
      });
    }

    startHintCycle() {
      if (
        !this.currentInput &&
        !this.isAnimating &&
        document.activeElement !== this.terminalContent
      ) {
        this.hintTimeout = setTimeout(
          () => this.showNextHint(),
          this.hintDelay,
        );
      }
    }

    async showNextHint() {
      if (
        this.currentInput ||
        this.isAnimating ||
        document.activeElement === this.terminalContent
      )
        return;

      this.isShowingHint = true;
      const hint = this.hints[this.hintIndex];

      let currentText = "";
      for (const char of hint) {
        if (
          this.currentInput ||
          !this.isShowingHint ||
          document.activeElement === this.terminalContent
        )
          break;
        currentText += char;
        this.handlePrompt({
          command: currentText,
          showCursor: true,
          action: "update",
          isHint: true,
        });
        await this.sleep(this.typeDelay);
      }

      if (
        !this.currentInput &&
        this.isShowingHint &&
        document.activeElement !== this.terminalContent
      ) {
        await this.sleep(this.pauseDelay);
      }

      while (
        currentText.length > 0 &&
        this.isShowingHint &&
        !this.currentInput &&
        document.activeElement !== this.terminalContent
      ) {
        currentText = currentText.slice(0, -1);
        this.handlePrompt({
          command: currentText,
          showCursor: true,
          action: "update",
          isHint: true,
        });
        await this.sleep(this.eraseDelay);
      }

      if (
        !this.currentInput &&
        document.activeElement !== this.terminalContent
      ) {
        this.hintIndex = (this.hintIndex + 1) % this.hints.length;
        await this.sleep(this.betweenHintsDelay);
        this.startHintCycle();
      }
      this.isShowingHint = false;
    }
  }

  class LocalAI {
    keywords: {
      "–æ–ø—ã—Ç|—Ä–∞–±–æ—Ç–∞|–∫–∞—Ä—å–µ—Ä–∞": string[];
      "–ø—Ä–æ–µ–∫—Ç|–¥–æ—Å—Ç–∏–∂–µ–Ω–∏": string[];
      "—Ç–µ—Ö–Ω–æ–ª–æ–≥|—Å—Ç–µ–∫|—è–∑—ã–∫": string[];
      "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏|–æ–±—É—á–µ–Ω–∏": string[];
      "–∫–æ–Ω—Ç–∞–∫—Ç|—Å–≤—è–∑|–Ω–∞–π—Ç–∏": string[];
    };
    defaultResponses: string[];
    constructor() {
      this.keywords = {
        "–æ–ø—ã—Ç|—Ä–∞–±–æ—Ç–∞|–∫–∞—Ä—å–µ—Ä–∞": [
          "–ë–æ–ª–µ–µ 10 –ª–µ—Ç –æ–ø—ã—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞—é CTO –≤ Ultimate Education.",
          "–†—É–∫–æ–≤–æ–∂—É IT-—Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ö–æ–ª–¥–∏–Ω–≥–∞ –∏–∑ 7 –∫–æ–º–ø–∞–Ω–∏–π.",
          "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.",
        ],
        "–ø—Ä–æ–µ–∫—Ç|–¥–æ—Å—Ç–∏–∂–µ–Ω–∏": [
          "–†–∞–∑—Ä–∞–±–æ—Ç–∞–ª LMS —Å–∏—Å—Ç–º—É –¥–ª—è 100k+ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
          "–°–æ–∑–¥–∞–ª –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ö–æ–ª–¥–∏–Ω–≥–∞.",
          "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å DevOps-—Å–∏—Å—Ç–µ–º—ã –≤ 10 —Ä–∞–∑.",
        ],
        "—Ç–µ—Ö–Ω–æ–ª–æ–≥|—Å—Ç–µ–∫|—è–∑—ã–∫": [
          "–û—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–µ–∫: React, TypeScript, Python, Kubernetes.",
          "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å Java, Kotlin, Node.js.",
          "–ê–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–±–ª–∞—á–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏.",
        ],
        "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏|–æ–±—É—á–µ–Ω–∏": [
          "–ü–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—é—Å—å –≤ —Å—Ñ—Ä–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.",
          "–û—Å–æ–±—ã–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ AI –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—é —Å–∏—Å—Ç–µ–º.",
          "–î–µ–ª—é—Å—å –æ–ø—ã—Ç–æ–º —á–µ—Ä–µ–∑ –º–µ–Ω—Ç–æ—Ä—Å—Ç–≤–æ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å—Ç–∞—Ç—å–∏.",
        ],
        "–∫–æ–Ω—Ç–∞–∫—Ç|—Å–≤—è–∑|–Ω–∞–π—Ç–∏": [
          "Email: dragorww@gmail.com",
          "Telegram: @dragorww",
          "GitHub: github.com/dragorww",
        ],
      };

      this.defaultResponses = [
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –æ –º–æ–µ–º –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã, –ø—Ä–æ–µ–∫—Ç–∞—Ö –∏–ª–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö.",
        "–ú–æ–∂–µ—Ç –±—ã—Ç—å, –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –º–æ–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö?",
        "–Ø –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é, –∏–ª–∏ –æ —Å–≤–æ–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö.",
      ];
    }

    generateResponse(input) {
      const normalizedInput = input.toLowerCase();

      // –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
      for (const [keywordPattern, responses] of Object.entries(this.keywords)) {
        const regex = new RegExp(keywordPattern, "i");
        if (regex.test(normalizedInput)) {
          // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
          return responses[Math.floor(Math.random() * responses.length)];
        }
      }

      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
      return this.defaultResponses[
        Math.floor(Math.random() * this.defaultResponses.length)
      ];
    }
  }

  const truncateText = (text, maxLength = 500) => {
    return text.length > maxLength
      ? text.substring(0, maxLength) + "..."
      : text;
  };

  new TerminalAnimation();
</script>

<style is:global>
  /* Terminal Component Styles */
  .terminal {
    display: none;
  }

  @media screen and (min-width: 1024px) {
    .terminal {
      display: flex;
      border: 1px solid var(--border-color);
      backdrop-filter: blur(4px);
      -webkit-backdrop-filter: blur(4px);
      border-radius: 8px;
      overflow: visible;
      width: 100%;
      max-width: 600px;
      height: 400px;
      flex-direction: column;
      box-shadow: 0 8px 32px rgba(var(--bg-color-rgb), 0.1);
      transition: all 0.3s ease;
      position: relative;
    }
  }

  /* –î–æ–±–∞–≤–ª—è–µ–º –ø—Å–µ–≤–¥–æ—ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –≤–æ–ª–Ω */
  .terminal::before,
  .terminal::after {
    content: "";
    position: absolute;
    inset: -2px;
    border-radius: 10px;
    border: 1px solid transparent;
    transition: all 0.3s ease;
    pointer-events: none;
    opacity: 0;
  }

  /* –°—Ç–∏–ª–∏ —Ñ–æ–∫—É—Å–∞ –¥–ª—è –≤—Å–µ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ */
  .terminal:focus-within {
    border-color: rgba(var(--accent-color-rgb), 0.2);
    box-shadow:
      0 8px 32px rgba(var(--bg-color-rgb), 0.1),
      0 0 0 1px rgba(var(--accent-color-rgb), 0.1);
  }

  .terminal:focus-within::before {
    border-color: rgba(var(--accent-color-rgb), 0.08);
    animation: rippleWave1 3s ease-out infinite;
  }

  .terminal:focus-within::after {
    border-color: rgba(var(--accent-color-rgb), 0.05);
    animation: rippleWave2 3s ease-out infinite 0.75s;
  }

  @keyframes rippleWave1 {
    0% {
      transform: scale(1);
      opacity: 0.5;
    }
    100% {
      transform: scale(1.05);
      opacity: 0;
    }
  }

  @keyframes rippleWave2 {
    0% {
      transform: scale(1);
      opacity: 0.3;
    }
    100% {
      transform: scale(1.08);
      opacity: 0;
    }
  }

  .terminal__header {
    padding: 8px 16px;
    background: rgba(var(--bg-color-rgb), 0.5);
    border-bottom: 1px solid var(--border-color);
    display: flex;
    align-items: center;
    gap: 16px;
    backdrop-filter: blur(8px);
    -webkit-backdrop-filter: blur(8px);
  }

  .terminal__title {
    color: var(--text-secondary);
    font-size: 0.875rem;
    margin-left: auto;
    margin-right: auto;
  }

  /* –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å—Ç–∏–ª–∏ —Ñ–æ–∫—É—Å–∞ —Å content */
  .terminal__content {
    background: rgba(var(--card-bg-rgb), 0.5);
    flex: 1;
    padding: 16px;
    font-family: "Fira Code", monospace;
    font-size: 14px;
    line-height: 1.5;
    overflow-y: auto;
    height: auto;
    min-height: 300px;
    max-height: 400px;
    outline: none;
  }

  .terminal__dots {
    display: flex;
    gap: 6px;
  }

  .terminal__dots-item {
    width: 12px;
    height: 12px;
    border-radius: 50%;
  }

  .terminal__dots-item--red {
    background: #ff5f56;
  }
  .terminal__dots-item--yellow {
    background: #ffbd2e;
  }
  .terminal__dots-item--green {
    background: #27c93f;
  }

  /* –ö–æ–º–∞–Ω–¥—ã –∏ –≤—ã–≤–æ–¥ */
  .terminal__output {
    opacity: 0;
    transform: translateY(-10px);
    animation: slideIn 0.3s ease forwards;
    margin-bottom: 1rem;
  }

  .terminal__welcome {
    color: var(--text-secondary);
    margin-bottom: 16px;
  }

  .terminal__cmd-hint {
    color: var(--accent-color);
    background: rgba(var(--bg-color-rgb), 0.1);
    border: 1px solid var(--border-color);
    padding: 2px 6px;
    border-radius: 4px;
  }

  /* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –±–ª–æ–∫–∏ */
  .terminal__info {
    display: grid;
    grid-template-columns: auto 1fr;
    gap: 8px 16px;
    align-items: baseline;
  }

  .terminal__info-term {
    color: var(--accent-color);
    font-weight: 500;
  }

  .terminal__info-desc {
    color: var(--text-secondary);
    margin: 0;
  }

  /* –ü—Ä–æ–µ–∫—Ç—ã */
  .terminal__projects {
    list-style: none;
    padding: 0;
    display: flex;
    flex-direction: column;
    gap: 16px;
  }

  .terminal__project {
    border-left: 2px solid var(--accent-color);
    padding-left: 12px;
  }

  .terminal__project-date {
    color: var(--accent-color);
    font-size: 0.875rem;
    display: inline-block;
    margin-right: 8px;
  }

  .terminal__project-title {
    color: var(--text-primary);
    font-size: 1rem;
    margin: 0;
    display: inline-block;
    font-weight: normal;
  }

  .terminal__project-details {
    list-style: none;
    padding-left: 16px;
    color: var(--text-secondary);
    font-size: 0.875rem;
    margin-top: 4px;
  }

  /* –ê–Ω–∏–º–∞—Ü–∏–∏ */
  @keyframes slideIn {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes pulseBorder {
    0%,
    100% {
      border-color: rgba(var(--accent-color-rgb), 0.1);
    }
    50% {
      border-color: rgba(var(--accent-color-rgb), 0.3);
    }
  }

  /* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å */
  @media (max-width: 768px) {
    .terminal {
      max-width: 100%;
      margin: 0 auto;
      height: 350px;
    }

    .terminal__content {
      font-size: 0.75rem;
    }
  }

  /* –°—Ç–∏–ª–∏ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ */
  .terminal__prompt {
    display: inline-block;
    margin-bottom: 8px;
    min-height: 24px;
    width: 100%;
  }

  .terminal__prompt-path {
    color: var(--accent-color);
    opacity: 0.8;
    font-weight: 500;
    flex-shrink: 0;
  }

  .terminal__prompt-branch {
    color: var(--secondary-color);
    opacity: 0.9;
    font-size: 0.9em;
    flex-shrink: 0;
  }

  .terminal__prompt-symbol {
    color: var(--accent-color);
    margin: 0 4px;
    font-weight: bold;
    flex-shrink: 0;
  }

  .terminal__prompt-input {
    color: var(--text-primary);
    display: inline;
    align-items: center;
    flex: 1 1 auto;
    min-width: 50px;
    word-break: break-word;
    white-space: pre-wrap;
    overflow-wrap: break-word;
    max-width: calc(100% - 20px);
  }

  .terminal__prompt-cursor {
    color: var(--accent-color);
    animation: blink 1s step-end infinite;
    font-weight: bold;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .terminal:focus-within .terminal__prompt-cursor {
    opacity: 1;
  }

  @keyframes blink {
    0%,
    100% {
      opacity: 1;
    }
    50% {
      opacity: 0;
    }
  }

  /* –°—Ç–∏–ª–∏ –¥–ª—è –æ—à–∏–±–æ–∫ */
  .terminal__output--error {
    color: #ff5f56;
  }

  /* –°—Ç–∏–ª–∏ –¥–ª—è —Å–∫—Ä—ã—Ç—ã—Ö –∫–æ–º–∞–Ω–¥ */
  .terminal__command {
    display: none;
  }

  /* –°—Ç–∏–ª–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ */
  .terminal__project-details li {
    margin-bottom: 4px;
    color: var(--text-secondary);
  }

  .terminal__project-title {
    color: var(--accent-color);
    font-weight: normal;
  }

  /* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤ */
  .terminal__info {
    margin: 8px 0;
  }

  .terminal__info-term {
    font-weight: bold;
  }

  /* –°—Ç–∏–ª–∏ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ */
  .terminal__prompt-input.hint {
    color: var(--text-tertiary);
    opacity: 0.7;
    font-style: italic;
  }

  /* –°—Ç–∏–ª–∏ –¥–ª—è AI –æ—Ç–≤–µ—Ç–æ–≤ */
  .terminal__output--ai {
    border-left: 2px solid var(--secondary-color);
    padding-left: 12px;
    margin: 8px 0;
  }

  .terminal__output-header {
    color: var(--secondary-color);
    font-size: 0.875rem;
    margin-bottom: 4px;
  }

  .terminal__output-content {
    color: var(--text-secondary);
  }

  .terminal__output--loading {
    color: var(--accent-color);
    font-style: normal;
    font-size: 0.875rem;
    display: flex;
    align-items: center;
    gap: 8px;
    margin: 8px 0;
    padding: 4px 0;
    border-left: 2px solid var(--accent-color);
    padding-left: 12px;
  }

  .terminal__output--loading::before {
    content: "‚†ã";
    animation: loadingSpinner 0.8s steps(10, end) infinite;
    font-size: 1.2em;
    order: -1;
    color: var(--accent-color);
    opacity: 0.8;
  }

  @keyframes loadingSpinner {
    0% {
      content: "‚†ã";
    }
    10% {
      content: "‚†ô";
    }
    20% {
      content: "‚†π";
    }
    30% {
      content: "‚†∏";
    }
    40% {
      content: "‚†º";
    }
    50% {
      content: "‚†¥";
    }
    60% {
      content: "‚†¶";
    }
    70% {
      content: "‚†ß";
    }
    80% {
      content: "‚†á";
    }
    90% {
      content: "‚†è";
    }
  }

  .terminal__output--loading::after {
    content: none;
  }
</style>
