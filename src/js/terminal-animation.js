class TerminalAnimation {
    // settings
    commandDelay = 50;
    commandPause = 1000;

    // state
    currentDirectory = '';
    currentBranch = '';
    currentInput = '';
    commandHistory = [];
    historyIndex = -1;
    isAnimating = false;

    hints = [
        '–≥–¥–µ —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å?',
        '–∫–∞–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –¥–µ–ª–∞–ª?',
        '—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã',
        '–∫–∞–∫ —Å —Ç–æ–±–æ–π —Å–≤—è–∑–∞—Ç—å—Å—è?',
        '–∫–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å?',
        '–≥–¥–µ —Ç–µ–±—è –Ω–∞–π—Ç–∏ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö?',
        'help - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥'
    ];

    hintDelay = 3000;        // –£–º–µ–Ω—å—à–∏–ª–∏ —Å 5000 –¥–æ 3000 –º—Å
    typeDelay = 80;          // –ù–µ–º–Ω–æ–≥–æ —É—Å–∫–æ—Ä–∏–ª–∏ –ø–µ—á–∞—Ç—å
    eraseDelay = 40;         // –ù–µ–º–Ω–æ–≥–æ —É—Å–∫–æ—Ä–∏–ª–∏ —Å—Ç–∏—Ä–∞–Ω–∏–µ
    pauseDelay = 1500;       // –£–º–µ–Ω—å—à–∏–ª–∏ –ø–∞—É–∑—É —Å 2000 –¥–æ 1500 –º—Å
    betweenHintsDelay = 500; // –î–æ–±–∞–≤–∏–ª–∏ –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –º–µ–∂–¥—É –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
    hintIndex = 0;
    hintTimeout = null;
    isShowingHint = false;

    constructor() {
        this.container = document.querySelector('.terminal__history');
        this.terminalContent = document.querySelector('.terminal__content');
        this.loadCommands();
        this.initialize();
        this.startHintCycle();
        this.hasAISupport = 'userAgentData' in navigator && 'speechRecognition' in window;
        
        // –¢–æ–∫–µ–Ω –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ –Ω–∞ huggingface.co
        this.HF_API_TOKEN = 'hf_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx';
        this.MODEL_URL = 'https://api-inference.huggingface.co/models/facebook/blenderbot-400M-distill';
        this.isInitializing = true;
    }

    loadCommands() {
        const commands = {};
        document.querySelectorAll('.terminal__command').forEach(cmd => {
            const commandName = cmd.dataset.command;
            commands[commandName] = {
                description: cmd.dataset.description || '',
                directory: cmd.dataset.directory || '',
                branch: cmd.dataset.branch || '',
                command: cmd.dataset.command || commandName,
                execute: () => {
                    const template = cmd.querySelector('template');
                    return template.innerHTML.trim();
                }
            };
        });

        this.commands = commands;
    }

    handlePrompt({
        command = '',
        showCursor = false,
        action = 'create',
        isHint = false
    } = {}) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª –≤ —Ñ–æ–∫—É—Å–µ –∏–ª–∏ —ç—Ç–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        const shouldShowCursor = showCursor && (document.activeElement === this.terminalContent || this.isInitializing);
        
        const promptHTML = `
            <span class="terminal__prompt">
                ${this.currentDirectory ? `<span class="terminal__prompt-path">${this.currentDirectory}</span>` : ''}
                ${this.currentBranch ? `<span class="terminal__prompt-branch">(${this.currentBranch})</span>` : ''}
                <span class="terminal__prompt-symbol">$</span> 
                <span class="terminal__prompt-input ${isHint ? 'hint' : ''}">${command}${shouldShowCursor ? '<span class="terminal__prompt-cursor">‚ñà</span>' : ''}</span>
            </span>`;

        switch (action) {
            case 'create':
                const promptElement = document.createElement('p');
                promptElement.innerHTML = promptHTML;
                return promptElement;
            
            case 'update':
                const lastPrompt = this.container.lastElementChild;
                lastPrompt.innerHTML = promptHTML;
                return lastPrompt;
            
            case 'append':
                const newPrompt = document.createElement('p');
                newPrompt.innerHTML = promptHTML;
                this.container.appendChild(newPrompt);
                this.terminalContent.scrollTop = this.terminalContent.scrollHeight;
                return newPrompt;
        }
    }

    async executeCommand() {
        const command = this.currentInput.trim().toLowerCase();
        
        if (command) {
            this.isAnimating = true;
            this.commandHistory.unshift(command);
            this.historyIndex = -1;
            
            const promptElement = this.container.lastElementChild;
            promptElement.innerHTML = this.handlePrompt({ 
                command: this.currentInput, 
                action: 'update' 
            }).innerHTML;

            if (command === 'clear') {
                this.container.innerHTML = '';
            } else {
                let output;
                
                if (this.commands[command]) {
                    output = this.commands[command].execute();
                } else {
                    output = await this.tryAIResponse(command);
                }
                
                if (output) {
                    const outputElement = document.createElement('div');
                    outputElement.classList.add('terminal__output');
                    outputElement.innerHTML = output;
                    this.container.appendChild(outputElement);
                    await this.sleep(10);
                }
            }

            this.isAnimating = false;
        }

        this.currentInput = '';
        this.handlePrompt({ showCursor: true, action: 'append' });
        await this.sleep(10);
        this.terminalContent.scrollTop = this.terminalContent.scrollHeight;
        this.startHintCycle();
    }

    async tryAIResponse(command) {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏
            const loadingTemplate = document.getElementById('loading-template');
            const loadingElement = loadingTemplate.content.cloneNode(true).firstElementChild;
            this.container.appendChild(loadingElement);
            this.scrollToBottom();

            await this.sleep(2000);

            const response = await fetch(this.MODEL_URL, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${this.HF_API_TOKEN}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    inputs: {
                        text: `Context: You are a helpful assistant for Sergey Andreev's personal website. 
                               He is a CTO with experience in educational projects.
                               Current question: ${command}`,
                        max_length: 100
                    }
                })
            });

            loadingElement.remove();

            if (!response.ok) {
                throw new Error('API Error');
            }

            const data = await response.json();
            const aiResponse = data.generated_text || data[0].generated_text;

            return `<div class="terminal__output terminal__output--ai">
                <div class="terminal__output-header">ü§ñ AI Response:</div>
                <div class="terminal__output-content">${aiResponse}</div>
            </div>`;

        } catch (error) {
            console.error('AI Error:', error);
            
            // –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π fallback
            const localAI = new LocalAI();
            const fallbackResponse = localAI.generateResponse(command);

            return `<div class="terminal__output terminal__output--ai">
                <div class="terminal__output-header">ü§ñ Local AI:</div>
                <div class="terminal__output-content">${fallbackResponse}</div>
            </div>`;
        }
    }

    async simulateCommand(commandName) {
        let promptElement = this.handlePrompt({ action: 'append' });
        const command = this.commands[commandName.split(' ')[0]];
        const text = command?.command || commandName;

        let currentText = '';
        for (const char of text) {
            await this.sleep(this.commandDelay);
            currentText += char;
            promptElement.innerHTML = this.handlePrompt({ 
                command: currentText, 
                action: 'create' 
            }).innerHTML;
            this.scrollToBottom();
        }

        await this.sleep(500);

        if (command) {
            const output = command.execute();
            const outputElement = document.createElement('div');
            outputElement.classList.add('terminal__output');
            outputElement.innerHTML = output;
            this.container.appendChild(outputElement);
            this.scrollToBottom();
        }

        if (command?.directory) {
            this.currentDirectory = command.directory;
        }

        if (command?.branch) {
            this.currentBranch = command.branch;
        }
    }

    async initialize() {
        this.disableScroll();
        this.isAnimating = true;
        this.isInitializing = true;
        
        await this.showWelcomeMessage();
        
        const initialCommands = ['about', 'skills', 'projects'];
        for (const cmd of initialCommands) {
            await this.sleep(this.commandPause);
            await this.simulateCommand(cmd);
        }

        await this.sleep(this.commandPause);
        this.isAnimating = false;
        this.isInitializing = false;
        this.enableScroll();
        this.setupEventListeners();
        
        // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª –Ω–µ –≤ —Ñ–æ–∫—É—Å–µ
        this.handlePrompt({ 
            showCursor: document.activeElement === this.terminalContent, 
            action: 'append' 
        });
        
        setTimeout(() => {
            if (!this.currentInput) {
                this.startHintCycle();
            }
        }, 1000);
    }

    disableScroll() {
        this.terminalContent.style.overflowY = 'hidden';
        this.savedScrollTop = this.terminalContent.scrollTop;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Å–∫—Ä–æ–ª–ª–∞ –∏ –∑–∞–ø—Ä–µ—â–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É
        this.terminalContent.addEventListener('scroll', this.preventScroll);
    }

    enableScroll() {
        this.terminalContent.style.overflowY = 'auto';
        this.terminalContent.removeEventListener('scroll', this.preventScroll);
    }

    preventScroll = () => {
        if (this.isAnimating) {
            this.terminalContent.scrollTop = this.savedScrollTop;
        }
    }

    scrollToBottom() {
        if (this.isInitializing || this.isAnimating) {
            this.savedScrollTop = this.terminalContent.scrollHeight - this.terminalContent.clientHeight;
            this.terminalContent.scrollTop = this.savedScrollTop;
        }
    }

    async showWelcomeMessage() {
        await this.simulateCommand('welcome');
    }

    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    setupEventListeners() {
        this.terminalContent.addEventListener('click', () => {
            this.terminalContent.focus();
        });

        this.terminalContent.setAttribute('tabindex', '0');

        this.terminalContent.addEventListener('keydown', (e) => {
            if (e.code === 'Space') {
                e.preventDefault();
            }
            this.handleKeyPress(e);
        });

        this.terminalContent.addEventListener('focus', () => {
            if (this.isShowingHint) {
                this.isShowingHint = false;
                clearTimeout(this.hintTimeout);
                this.handlePrompt({ command: '', showCursor: true, action: 'update' });
            }
        });

        this.terminalContent.addEventListener('blur', () => {
            if (!this.currentInput && !this.isAnimating) {
                this.startHintCycle();
            }
        });

        document.removeEventListener('keydown', this.handleKeyPress);
    }

    handleKeyPress(e) {
        if (this.isShowingHint) {
            this.isShowingHint = false;
            clearTimeout(this.hintTimeout);
            this.currentInput = '';
            this.handlePrompt({ command: '', showCursor: true, action: 'update' });
        }

        if (e.key === 'Enter') {
            this.executeCommand();
            this.startHintCycle();
        } else if (e.key === 'Backspace') {
            this.currentInput = this.currentInput.slice(0, -1);
            this.handlePrompt({ command: this.currentInput, showCursor: true, action: 'update' });
        } else if (e.key === 'ArrowUp') {
            this.navigateHistory(-1);
        } else if (e.key === 'ArrowDown') {
            this.navigateHistory(1);
        } else if (e.key.length === 1) {
            this.currentInput += e.key;
            this.handlePrompt({ command: this.currentInput, showCursor: true, action: 'update' });
        }
    }

    navigateHistory(direction) {
        if (this.commandHistory.length === 0) return;
        
        this.historyIndex = Math.max(
            -1,
            Math.min(
                this.commandHistory.length - 1,
                this.historyIndex + direction
            )
        );

        if (this.historyIndex === -1) {
            this.currentInput = '';
        } else {
            this.currentInput = this.commandHistory[this.historyIndex];
        }
        
        this.handlePrompt({ command: this.currentInput, showCursor: true, action: 'update' });
    }

    startHintCycle() {
        if (!this.currentInput && !this.isAnimating && document.activeElement !== this.terminalContent) {
            this.hintTimeout = setTimeout(() => this.showNextHint(), this.hintDelay);
        }
    }

    async showNextHint() {
        if (this.currentInput || this.isAnimating || document.activeElement === this.terminalContent) return;

        this.isShowingHint = true;
        const hint = this.hints[this.hintIndex];
        
        let currentText = '';
        for (const char of hint) {
            if (this.currentInput || !this.isShowingHint || document.activeElement === this.terminalContent) break;
            currentText += char;
            this.handlePrompt({ 
                command: currentText, 
                showCursor: true, 
                action: 'update',
                isHint: true
            });
            await this.sleep(this.typeDelay);
        }

        if (!this.currentInput && this.isShowingHint && document.activeElement !== this.terminalContent) {
            await this.sleep(this.pauseDelay);
        }

        while (currentText.length > 0 && this.isShowingHint && !this.currentInput && document.activeElement !== this.terminalContent) {
            currentText = currentText.slice(0, -1);
            this.handlePrompt({ 
                command: currentText, 
                showCursor: true, 
                action: 'update' 
            });
            await this.sleep(this.eraseDelay);
        }

        if (!this.currentInput && document.activeElement !== this.terminalContent) {
            this.hintIndex = (this.hintIndex + 1) % this.hints.length;
            await this.sleep(this.betweenHintsDelay);
            this.startHintCycle();
        }
        this.isShowingHint = false;
    }
}

// –£–ª—É—á—à–µ–Ω–Ω—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π fallback —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º NLP.js
class LocalAI {
    constructor() {
        this.keywords = {
            '–æ–ø—ã—Ç|—Ä–∞–±–æ—Ç–∞|–∫–∞—Ä—å–µ—Ä–∞': [
                '–ë–æ–ª–µ–µ 10 –ª–µ—Ç –æ–ø—ã—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞—é CTO –≤ Ultimate Education.',
                '–†—É–∫–æ–≤–æ–∂—É IT-—Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ö–æ–ª–¥–∏–Ω–≥–∞ –∏–∑ 7 –∫–æ–º–ø–∞–Ω–∏–π.',
                '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.'
            ],
            '–ø—Ä–æ–µ–∫—Ç|–¥–æ—Å—Ç–∏–∂–µ–Ω–∏': [
                '–†–∞–∑—Ä–∞–±–æ—Ç–∞–ª LMS —Å–∏—Å—Ç–µ–º—É –¥–ª—è 100k+ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.',
                '–°–æ–∑–¥–∞–ª –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ö–æ–ª–¥–∏–Ω–≥–∞.',
                '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å DevOps-—Å–∏—Å—Ç–µ–º—ã –≤ 10 —Ä–∞–∑.'
            ],
            '—Ç–µ—Ö–Ω–æ–ª–æ–≥|—Å—Ç–µ–∫|—è–∑—ã–∫': [
                '–û—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–µ–∫: React, TypeScript, Python, Kubernetes.',
                '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å Java, Kotlin, Node.js.',
                '–ê–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–±–ª–∞—á–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏.'
            ],
            '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏|–æ–±—É—á–µ–Ω–∏': [
                '–ü–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—é—Å—å –≤ —Å—Ñ–µ—Ä–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.',
                '–û—Å–æ–±—ã–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ AI –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—é —Å–∏—Å—Ç–µ–º.',
                '–î–µ–ª—é—Å—å –æ–ø—ã—Ç–æ–º —á–µ—Ä–µ–∑ –º–µ–Ω—Ç–æ—Ä—Å—Ç–≤–æ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å—Ç–∞—Ç—å–∏.'
            ],
            '–∫–æ–Ω—Ç–∞–∫—Ç|—Å–≤—è–∑|–Ω–∞–π—Ç–∏': [
                'Email: dragorww@gmail.com',
                'Telegram: @dragorww',
                'GitHub: github.com/dragorww'
            ]
        };

        this.defaultResponses = [
            '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –æ –º–æ–µ–º –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã, –ø—Ä–æ–µ–∫—Ç–∞—Ö –∏–ª–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö.',
            '–ú–æ–∂–µ—Ç –±—ã—Ç—å, –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –º–æ–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö?',
            '–Ø –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é, –∏–ª–∏ –æ —Å–≤–æ–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö.'
        ];
    }

    generateResponse(input) {
        const normalizedInput = input.toLowerCase();
        
        // –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        for (const [keywordPattern, responses] of Object.entries(this.keywords)) {
            const regex = new RegExp(keywordPattern, 'i');
            if (regex.test(normalizedInput)) {
                // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                return responses[Math.floor(Math.random() * responses.length)];
            }
        }

        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
        return this.defaultResponses[Math.floor(Math.random() * this.defaultResponses.length)];
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.initTerminalAnimation = () => {
    new TerminalAnimation();
}; 